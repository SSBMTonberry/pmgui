cmake_minimum_required(VERSION 3.11)
project(pmgui_demo)

include_directories(${PROJECT_SOURCE_DIR}/../external_libs/sfml/include/SFML/ ${PROJECT_SOURCE_DIR}/../external_libs/ ${PROJECT_SOURCE_DIR}/../external_libs/include/)
set(BASE_PATH ${PROJECT_SOURCE_DIR}/..)

#if(LINUX)
#    set(SFML_DEPENDENCIES jpeg X11 Xrandr freetype xcb X11-xcb xcb-randr xcb-image GL FLAC ogg vorbis vorbisenc vorbisfile openal pthread)
#    set(SFML_REST udev) #libudev
#elseif(WIN32)
#    if(MSVC)
#        message("USING MSVC")
#
#        if(DEBUG)
#            set(PATH_SFML_DEPEND ${BASE_PATH}/external_libs/libs/win/debug/msvc/sfml)
#        elseif(RELEASE)
#            set(PATH_SFML_DEPEND ${BASE_PATH}/external_libs/libs/win/release/msvc/sfml)
#        endif()
#        set(SFML_DEPENDENCIES opengl32.lib winmm.lib gdi32.lib ${PATH_SFML_DEPEND}/freetype.lib ${PATH_SFML_DEPEND}/openal32.lib ${PATH_SFML_DEPEND}/flac.lib ${PATH_SFML_DEPEND}/vorbisenc.lib ${PATH_SFML_DEPEND}/vorbisfile.lib ${PATH_SFML_DEPEND}/vorbis.lib ${PATH_SFML_DEPEND}/ogg.lib ws2_32.lib )
#    else()
#        message("USING MINGW")
#        if(DEBUG)
#            set(PATH_SFML_DEPEND ${BASE_PATH}/external_libs/libs/win/debug/mingw/sfml)
#        elseif(RELEASE)
#            set(PATH_SFML_DEPEND ${BASE_PATH}/external_libs/libs/win/release/mingw/sfml)
#        endif()
#        message("PATH: " ${PATH_SFML_DEPEND})
#        set(SFML_DEPENDENCIES ${PATH_SFML_DEPEND}/libfreetype.a ${PATH_SFML_DEPEND}/libFLAC.a ${PATH_SFML_DEPEND}/libogg.a ${PATH_SFML_DEPEND}/libopenal32.a ${PATH_SFML_DEPEND}/libvorbis.a ${PATH_SFML_DEPEND}/libvorbisenc.a ${PATH_SFML_DEPEND}/libvorbisfile.a)
#        set(SFML_DEPEND_2 opengl32 winmm gdi32 freetype jpeg)
#    endif()
#elseif(APPLE)
#    message("USING CLANG!")
#    set(PATH_SFML_DEPEND ${BASE_PATH}/external_libs/libs/osx/frameworks)
#
#    set(SFML_DEPENDENCIES ${PATH_SFML_DEPEND}/FLAC.framework ${PATH_SFML_DEPEND}/freetype.framework ${PATH_SFML_DEPEND}/ogg.framework ${PATH_SFML_DEPEND}/OpenAL.framework ${PATH_SFML_DEPEND}/vorbis.framework ${PATH_SFML_DEPEND}/vorbisenc.framework ${PATH_SFML_DEPEND}/vorbisfile.framework)
#endif()

set(SOURCE_FILES DemoManager.cpp DemoManager.h)

if(LINUX)
    #if(DEBUG)
    #    set(PATH_LIBS ${BASE_PATH}/external_libs/libs/linux/debug)
    #    set(PATH_SFML_LIB ${PATH_LIBS}/sfml)
    #    set(MY_STATIC_LIBS ${PATH_SFML_LIB}/libsfml-network-s-d.a ${PATH_SFML_LIB}/libsfml-audio-s-d.a ${PATH_SFML_LIB}/libsfml-graphics-s-d.a ${PATH_SFML_LIB}/libsfml-window-s-d.a ${PATH_SFML_LIB}/libsfml-system-s-d.a)
    #elseif(RELEASE)
    #    set(PATH_LIBS ${BASE_PATH}/external_libs/libs/linux/release)
    #    set(PATH_SFML_LIB ${PATH_LIBS}/sfml)
    #    set(MY_STATIC_LIBS ${PATH_SFML_LIB}/libsfml-network-s.a ${PATH_SFML_LIB}/libsfml-audio-s.a ${PATH_SFML_LIB}/libsfml-graphics-s.a ${PATH_SFML_LIB}/libsfml-window-s.a ${PATH_SFML_LIB}/libsfml-system-s.a)
    #endif()

    set(MY_STATIC_LIBS sfml-network sfml-audio sfml-graphics sfml-window sfml-system)
    add_executable(pmgui_demo main.cpp ${SOURCE_FILES} ${GUI_SOURCE_FILES} ${IMGUI_SOURCE_FILES} ${FMT_SOURCE_FILES} )
    target_link_libraries(pmgui_demo pmgui stdc++fs png ${MY_STATIC_LIBS} ${SFML_DEPENDENCIES} ${SFML_REST})
elseif(WIN32)
    if(MSVC)
        #set(PATH_LIBS ${BASE_PATH}/external_libs/libs/win)
        #if(DEBUG)
        #    set(PATH_SFML_LIB ${BASE_PATH}/external_libs/libs/win/debug/msvc/sfml)
        #    set(MY_STATIC_LIBS ${PATH_SFML_LIB}/sfml-network-s-d.lib ${PATH_SFML_LIB}/sfml-audio-s-d.lib ${PATH_SFML_LIB}/sfml-main-d.lib ${PATH_SFML_LIB}/sfml-graphics-s-d.lib ${PATH_SFML_LIB}/sfml-window-s-d.lib ${PATH_SFML_LIB}/sfml-system-s-d.lib)
        #elseif(RELEASE)
        #    set(PATH_SFML_LIB ${BASE_PATH}/external_libs/libs/win/release/msvc/sfml)
        #    set(MY_STATIC_LIBS ${PATH_SFML_LIB}/sfml-network-s.lib ${PATH_SFML_LIB}/sfml-audio-s.lib ${PATH_SFML_LIB}/sfml-main.lib ${PATH_SFML_LIB}/sfml-graphics-s.lib ${PATH_SFML_LIB}/sfml-window-s.lib ${PATH_SFML_LIB}/sfml-system-s.lib)
        #endif()

        set(MY_STATIC_LIBS sfml-network sfml-audio sfml-graphics sfml-window sfml-system)
        add_executable(pmgui_demo main.cpp ${SOURCE_FILES} ${GUI_SOURCE_FILES} ${IMGUI_SOURCE_FILES} ${FMT_SOURCE_FILES}) #${BASE_PATH}/logo/icon.rc)
        target_link_libraries(pmgui_demo pmgui ${MY_STATIC_LIBS} ${SFML_DEPENDENCIES})
    else()

        #if(DEBUG)
        #    set(PATH_SFML_LIB ${BASE_PATH}/external_libs/libs/win/debug/mingw/sfml)
        #    set(MY_STATIC_LIBS ${PATH_SFML_LIB}/libsfml-network-s-d.a ${PATH_SFML_LIB}/libsfml-audio-s-d.a ${PATH_SFML_LIB}/libsfml-graphics-s-d.a ${PATH_SFML_LIB}/libsfml-window-s-d.a ${PATH_SFML_LIB}/libsfml-system-s-d.a)
        #elseif(RELEASE)
        #    set(PATH_SFML_LIB ${BASE_PATH}/external_libs/libs/win/release/mingw/sfml)
        #    set(MY_STATIC_LIBS ${PATH_SFML_LIB}/libsfml-network-s.a ${PATH_SFML_LIB}/libsfml-audio-s.a ${PATH_SFML_LIB}/libsfml-graphics-s.a ${PATH_SFML_LIB}/libsfml-window-s.a ${PATH_SFML_LIB}/libsfml-system-s.a)
        #endif()
        set(MY_STATIC_LIBS sfml-network sfml-audio sfml-graphics sfml-window sfml-system)
        add_executable(pmgui_demo main.cpp ${SOURCE_FILES} ${GUI_SOURCE_FILES} ${IMGUI_SOURCE_FILES} ${FMT_SOURCE_FILES} ) #${BASE_PATH}/logo/icon.rc)
        target_link_libraries(pmgui_demo pmgui stdc++fs ${MY_STATIC_LIBS} ${SFML_DEPENDENCIES})
    endif()
elseif(APPLE)
    set(SFML_BUILD_STATIC 1)
    #if(DEBUG)
    #    set(PATH_SFML_LIB ${BASE_PATH}/external_libs/libs/osx/debug/sfml)
    #    if(SFML_BUILD_STATIC)
    #        set(MY_STATIC_LIBS ${PATH_SFML_LIB}/libsfml-network-s-d.a ${PATH_SFML_LIB}/libsfml-audio-s-d.a ${PATH_SFML_LIB}/libsfml-graphics-s-d.a ${PATH_SFML_LIB}/libsfml-window-s-d.a ${PATH_SFML_LIB}/libsfml-system-s-d.a)
    #    else()
    #        set(MY_DYNAMIC_LIBS ${PATH_SFML_LIB}/libsfml-network-d.dylib ${PATH_SFML_LIB}/libsfml-audio-d.dylib ${PATH_SFML_LIB}/libsfml-graphics-d.dylib ${PATH_SFML_LIB}/libsfml-window-d.dylib ${PATH_SFML_LIB}/libsfml-system-d.dylib)
    #    endif()
    #elseif(RELEASE)
    #    set(PATH_SFML_LIB ${BASE_PATH}/external_libs/libs/osx/release/sfml)
    #    if(SFML_BUILD_STATIC)
    #        set(MY_STATIC_LIBS ${PATH_SFML_LIB}/libsfml-network-s.a ${PATH_SFML_LIB}/libsfml-audio-s.a ${PATH_SFML_LIB}/libsfml-graphics-s.a ${PATH_SFML_LIB}/libsfml-window-s.a ${PATH_SFML_LIB}/libsfml-system-s.a)
    #    else()
    #        set(MY_DYNAMIC_LIBS ${PATH_SFML_LIB}/libsfml-network.dylib ${PATH_SFML_LIB}/libsfml-audio.dylib ${PATH_SFML_LIB}/libsfml-graphics.dylib ${PATH_SFML_LIB}/libsfml-window.dylib ${PATH_SFML_LIB}/libsfml-system.dylib)
    #    endif()
    #endif()

    set(MY_STATIC_LIBS sfml-network sfml-audio sfml-graphics sfml-window sfml-system)
    set(FRAMEWORK_LIBS_BASE "-framework Carbon" "-framework OpenGL" "-framework Cocoa" "-framework IOKit" "-framework CoreVideo" "-framework CoreFoundation")

    set(MACOSX_BUNDLE_BUNDLE_NAME pmgui_demo)
    set(MACOSX_BUNDLE_GUI_IDENTIFIER "robin.pmgui.demo")
    set(MACOSX_BUNDLE_INFO_STRING "A demo of PmGui")
    set(MACOSX_BUNDLE_ICON_FILE "icon.icns")
    set(MACOSX_BUNDLE_LONG_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH})
    set(MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH})
    set(MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH})
    add_executable(pmgui_demo MACOSX_BUNDLE main.cpp ${SOURCE_FILES} ${GUI_SOURCE_FILES} ${IMGUI_SOURCE_FILES} ${FMT_SOURCE_FILES} )
    if(SFML_BUILD_STATIC)
        target_link_libraries(pmgui_demo pmgui stdc++ -ObjC /usr/local/opt/llvm/lib/libc++experimental.a /usr/local/opt/llvm/lib/libc++fs.a ${MY_STATIC_LIBS} ${FRAMEWORK_LIBS_BASE} ${SFML_DEPENDENCIES})
    else()
        target_link_libraries(pmgui_demo pmgui stdc++ -ObjC /usr/local/opt/llvm/lib/libc++experimental.a /usr/local/opt/llvm/lib/libc++fs.a ${MY_DYNAMIC_LIBS} ${FRAMEWORK_LIBS_BASE} ${SFML_DEPENDENCIES})
        set_target_properties(pmgui_demo PROPERTIES
                MACOSX_BUNDLE TRUE
                MACOSX_FRAMEWORK_IDENTIFIER org.cmake.ExecutableTarget
                FRAMEWORK ${MY_DYNAMIC_LIBS})

    endif()
endif()